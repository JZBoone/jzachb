extends layout

block content
  h1 My Story
  p I am a software developer and licensed clinical social worker based in San Jose, California. How did I get to be these two very different and seemingly contradictory things? Good question!
  p  As a child in the 1990's, "screen time" was not a part of my family's lexicon. For better or for worse I had free reign over the family computer where I frequently spent late nights building websites. Thanks Mom and Dad! By middle school I had gotten pretty far ahead in math. In 8th grade the high school math class I was going to take didn't fit into my schedule, so they put me in AP computer science. That's how I fell in love with software development. Just kidding! The class was C++ and I didn't like it (although I did manage to eke out a 5 on the AP exam). More than anything, I felt cheated that the class didn't help me get any closer to building something truly cool like the games that I played (and tried to program) on my TI-83 calculator.
  p After declaring as a math major my freshman year in college, I had a beginning of life crisis of sorts. I wasn't passionate about math because it all seemed so abstract and impractical. I ended up transferring to UC Berkeley where I majored in Spanish and Portuguese. The decision to commit to learn Spanish was actually simple. I didn't want to be monolingual and I reasoned that being bilingual would benefit me in whatever profession I ended up choosing.
  p As a newly minted undergraduate, I had a strong desire to help people but no concrete plan. I started volunteering at the East Bay Sanctuary Covenant (EBSC) where I helped immigrants and asylum seekers file federal immigration forms. It was really impactful work and it inspired me to become a social worker. 
  p I couldn't help but try to tackle some of the organizational inefficiences at EBSC. One of the most obvious pain points was how they gathered and reported data on the community development program. The data collection method at the time was done in plane notebooks. Each time the program coordinator met with someone or provided a service of some sort, he would jot down in one of his notebooks the date, who he met with, and the type of service that he provided. When it came time to submit a report to the program funders, he combed through his notebooks and painstakingly compiled the data. "This is inefficient!" I thought. So I spun up a very mediocre Microsoft Access database and installed it on the old Windows network. 
  p As a masters of social work student and intern, I started noticing how I wasn't exactly like all of the other students. Inefficiencies abounded in the world of public mental health. "Productivity" and "compliance" were dirty words that social workers hated to hear, but they were the things that I was most naturally good at. In order to churn out all of the required documentation and paperwork, I developed processes and tools that I started sharing with colleagues. 
  p After fine tuning my personal workflows, I started having ideas that were more ambitious and increasingly focused on organizational and systemic inefficiencies. One such inefficiency that found itself in my crosshairs was the Child and Adolescent Needs and Strengths (CANS) assessment. The CANS was billed as a systems-level reporting tool that would be used to assess the client population at large and the impact of services provided. Interestingly, the tool was supposed to be administered in such a way that captured the client's perception of needs and strengths, not the perspective of the treating clinician. This didn't bother me. What did bother me was that the administration of the tool was ambiguous at best. I attended the training that explained the philosophy behind the tool and even tested clinicians ability to administer the tool correctly. Then I saw where the rubber met the road. The form that we used to administer the tool consisted of a list of items to be scored. It was a pretty long list. The problem was that it was the clinician's responsibility to figure out how to explain each item to the child and family. As an example, one of the items was "resourcefulness." This is a fairly complex idea to communicate to a five-year-old. Yet there was no guidance let alone standardized way of doing this. So naturally, I created my own version of the form with concise explanations of each item that I could use to administer the tool. It might not surprise you to learn that the organization forbid the use of my form (and I guess it shouldn't have surprised me either).
  p It was difficult working in a system that on the one hand was in desperate need of change, and on the other hand was inherently resistent to change. In cahoots with my father, I founded a technology company aimed at facilitating communication between mental health clients and providers. I rallied a team of remote developers and we built an awesome product. Initially we went after individual providers in private practice but struggled with customer adoption. Although I already knew it to be true, therapists were not the most technologically savvy bunch and did not make for good early adopters. Next we created a private labelled version of the product and went after organizations. We had better success in terms of adoption and were able to iterate and develop custom work flows for our first few organizations.
  p I didn't start writing code for my company right away, although it was bound to happen at some point. My primary role was product manager, but because I wanted to have more control over copy (e.g., fixing spelling mistakes) I found my way into the code base pretty quickly. After a while, I was doing all of the front end development myself and I was loving it! I started devouring courses on PluralSight and Coursera and I marvelled at my productivity as I mastered the libraries and frameworks that we were using. And this is when I began to fall in love with software development.
  p Although I periodically dabble in new software ecosystems, my bread and butter continues to be web development. Initially the bulk of my web experience was with AngularJS, but I am a recent convert to the React ecosystem. At the end of the day, I am driven by the satisfaction I get when users adopt, and better yet, depend on my features.
